package com.cg.OnlineBusBooking.controllers;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.cg.OnlineBusBooking.entities.Bus;
import com.cg.OnlineBusBooking.entities.BusOperator;
import com.cg.OnlineBusBooking.exceptions.BusAlreadyExistException;
import com.cg.OnlineBusBooking.serviceinterfaces.IBusOperatorService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import javassist.NotFoundException;

//Code start - By Saurabh Dadhich & Sidharth Menon

@RestController
@CrossOrigin("*")
@RequestMapping(path = "/api/v1/busoperator") //URL specification before every method
@Api(value = "BusOperator", tags = { "BusOperatorAPI" })
public class BusOperatorController {
	
	static final Logger log = 
	        LoggerFactory.getLogger(BusOperatorController.class);
	
	//Dependency Injection
	@Autowired
	IBusOperatorService busOperatorService;
	
	/**
	 * This method is for adding a bus
	 * 
	 * @param Bus
	 * @throws BusAlreadyExistException
	 */
	@PostMapping("/")
	@ResponseStatus(code = HttpStatus.CREATED)
	@ApiOperation(value = "Add a bus", response = Bus.class)
	public void addBus(@RequestBody Bus b) {
		busOperatorService.addBus(b);
	}
	
	/**
	 * This method is for adding a bus operator
	 * 
	 * @param BusOperator
	 * @throws BusOperatorAlreadyExistException
	 */
	@PostMapping("/busop/")
	@ResponseStatus(code = HttpStatus.CREATED)
	@ApiOperation(value = "Add a bus operator", response = BusOperator.class)
	public void addBusOperator(@RequestBody BusOperator busOp) {
		busOperatorService.addBusOperator(busOp);
	}
	
	/**
	 * This method is to get revenue generated by bus route
	 * 
	 * @param String
	 * @return ResponseEntity<Integer>
	 * @throws NotFoundException
	 */
	@GetMapping("/revenue/{routeName}")
	@ApiOperation(value = "Get revenue generated by bus route", response = BusOperator.class)
	public ResponseEntity<Integer> getRevenueByBusRoute(@PathVariable String routeName) {
		ResponseEntity<Integer> re = null;
		int revenue = 0;
		Optional<Integer> rev = Optional.of(busOperatorService.getRevenueByBusRoute(routeName));
		if(rev.isPresent()) {
			revenue = rev.get();
			re = new ResponseEntity<Integer>(revenue, HttpStatus.OK);
		}
		else {
			re = new ResponseEntity<Integer>(HttpStatus.NOT_FOUND);
		}
		return re;
	}
		
	/**
	 * This method is to get revenue generated by bus route and date
	 * 
	 * @param String, String
	 * @return ResponseEntity<Integer>
	 * @throws NotFoundException
	 */
	@GetMapping("/revenue/{routeName}/{date}")
	@ApiOperation(value = "Get revenue generated by bus route and date", notes = "Provide date in YYYY-MM-DD format", response = BusOperator.class)
	public ResponseEntity<Integer> getRevenueByBusRouteAndDate(@PathVariable String routeName, @PathVariable String date) {
		ResponseEntity<Integer> re = null;
		int revenue = 0;
		LocalDate date1 = LocalDate.parse(date);
		Optional<Integer> rev = Optional.of(busOperatorService.getRevenueByBusRouteAndDate(routeName, date1));
		if(rev.isPresent()) {
			revenue = rev.get();
			re = new ResponseEntity<Integer>(revenue, HttpStatus.OK);
		}
		else {
			re = new ResponseEntity<Integer>(HttpStatus.NOT_FOUND);
		}
		return re;
	}
	
	/**
	 * This method is to get monthly revenue generated by bus route
	 * 
	 * @param String, String, String
	 * @return ResponseEntity<Integer>
	 * @throws NotFoundException
	 */
	@GetMapping("/monthlyrevenue/{routeName}/{month}/{year}")
	@ApiOperation(value = "Get monthly revenue generated by bus route", notes = "Provide month and year value", response = BusOperator.class)
	public ResponseEntity<Integer> getMonthlyRevenueByBusRoute(@PathVariable String routeName, @PathVariable String month, @PathVariable String year) {
		ResponseEntity<Integer> re = null;
		int revenue = 0;
		Optional<Integer> rev = Optional.of(busOperatorService.getMonthlyRevenueByBusRoute(routeName, month, year));
		if(rev.isPresent()) {
			revenue = rev.get();
			re = new ResponseEntity<Integer>(revenue, HttpStatus.OK);
		}
		else {
			re = new ResponseEntity<Integer>(HttpStatus.NOT_FOUND);
		}
		return re;
	}
	
	/**
	 * This method is to get yearly revenue generated by bus route
	 * 
	 * @param String, String
	 * @return ResponseEntity<Integer>
	 * @throws NotFoundException
	 */
	@GetMapping("/yearlyrevenue/{routeName}/{year}")
	@ApiOperation(value = "Get yearly revenue generated by bus route", notes = "Provide year value", response = BusOperator.class)
	public ResponseEntity<Integer> getYearlyRevenueByBusRoute(@PathVariable String routeName, @PathVariable String year) {
		ResponseEntity<Integer> re = null;
		int revenue = 0;
		Optional<Integer> rev = Optional.of(busOperatorService.getYearlyRevenueByBusRoute(routeName, year));
		if(rev.isPresent()) {
			revenue = rev.get();
			re = new ResponseEntity<Integer>(revenue, HttpStatus.OK);
		}
		else {
			re = new ResponseEntity<Integer>(HttpStatus.NOT_FOUND);
		}
		return re;
	}
	
	//Code end - By Saurabh Dadhich & Sidharth Menon
	
	@GetMapping("/getbybusop/{busOperatorUsername}")
	@ResponseStatus(HttpStatus.FOUND)
	@ApiOperation(value = "Get all Bus by Username", response = Bus.class)
	public Bus getAllBusByUsername(@PathVariable("busOperatorUsername")String busOperatorUsername){
		return busOperatorService.getAllBusByUsername(busOperatorUsername);
	}
	
	@GetMapping("/busop/{busOperatorUsername}/{password}")
	@ResponseStatus(HttpStatus.FOUND)
	@ApiOperation(value = "Get all Bus by Username", response = Bus.class)
	public BusOperator getBusOperatorByUsernameAndPassword(@PathVariable("busOperatorUsername")String busOperatorUsername,
			@PathVariable("password")String password){
		return busOperatorService.getAllBusOperatorByUsernameAndPassword(busOperatorUsername, password);
	}
	
}